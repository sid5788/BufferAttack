Dump of assembler code for function readString:
   1. Store Base pointer
   0x0000000000401838 <+0>:     push   %rbp

   2. Create New stack frame
   0x0000000000401839 <+1>:     mov    %rsp,%rbp

   3. Store current register values before overwriting them
   0x000000000040183c <+4>:     push   %r13
   0x000000000040183e <+6>:     push   %r12
   0x0000000000401840 <+8>:     push   %rbx

   4.  
     
   0x0000000000401841 <+9>:     sub    $0x8,%rsp
   0x0000000000401845 <+13>:    mov    %rdi,%r13
   0x0000000000401848 <+16>:    lea    0x24(%rsi),%eax
   0x000000000040184b <+19>:    cltq   
   0x000000000040184d <+21>:    add    $0x1e,%rax
   0x0000000000401851 <+25>:    and    $0xfffffffffffffff0,%rax
   0x0000000000401855 <+29>:    sub    %rax,%rsp
   0x0000000000401858 <+32>:    lea    0xf(%rsp),%r12
   0x000000000040185d <+37>:    and    $0xfffffffffffffff0,%r12

   5. Set i =0 
   0x0000000000401861 <+41>:    mov    $0x0,%ebx

   6. Start of for (;;) {

   7. Call fgetc()
   0x0000000000401866 <+46>:    mov    0x2029f3(%rip),%rdi        # 0x604260 <stdin@@GLIBC_2.2.5>
   0x000000000040186d <+53>:    callq  0x4006e8 <fgetc@plt>

   8. If (C == EOF) Jump to instruction 80
   0x0000000000401872 <+58>:    cmp    $0xffffffffffffffff,%eax
   0x0000000000401875 <+61>:    je     0x401888 <readString+80>

   9. If C == '\n', Jump to instruction 80
   0x0000000000401877 <+63>:    cmp    $0xa,%eax
   0x000000000040187a <+66>:    je     0x401888 <readString+80>

   10. buf [i++] = c 

   0x000000000040187c <+68>:    movslq %ebx,%rdx
   0x000000000040187f <+71>:    mov    %al,(%r12,%rdx,1)
   0x0000000000401883 <+75>:    add    $0x1,%ebx

   11. end of for (;;) loop

   0x0000000000401886 <+78>:    jmp    0x401866 <readString+46>

  

   12. Set i=0 and find effective address of buf and put it in rdx register

   0x0000000000401888 <+80>:    movslq %ebx,%rbx
   0x000000000040188b <+83>:    movb   $0x0,(%r12,%rbx,1)
   0x0000000000401890 <+88>:    lea    0x24(%r12),%rdx

   13. for i=0 to BUFSIZE 
   0x0000000000401895 <+93>:    movzbl (%r12),%eax
   0x000000000040189a <+98>:    mov    %al,0x0(%r13)
   0x000000000040189e <+102>:   add    $0x1,%r12
   0x00000000004018a2 <+106>:   add    $0x1,%r13
   0x00000000004018a6 <+110>:   cmp    %rdx,%r12
   0x00000000004018a9 <+113>:   jne    0x401895 <readString+93>

   14.Restore register values and leave
   0x00000000004018ab <+115>:   lea    -0x18(%rbp),%rsp
   0x00000000004018af <+119>:   pop    %rbx
   0x00000000004018b0 <+120>:   pop    %r12
   0x00000000004018b2 <+122>:   pop    %r13
   0x00000000004018b4 <+124>:   leaveq 
   0x00000000004018b5 <+125>:   retq   
End of assembler dump.











Main () :
--------


Dump of assembler code for function main:

1. Store the register values
   0x00000000004028bc <+0>:     push   %r12
   0x00000000004028be <+2>:     push   %rbp
   0x00000000004028bf <+3>:     push   %rbxa

2. Call getpid() function
   0x00000000004028c0 <+4>:     mov    %edi,%ebp
   0x00000000004028c2 <+6>:     mov    %rsi,%rbx
   0x00000000004028c5 <+9>:     callq  0x4006d8 <getpid@plt>

3. Call srand() function
   0x00000000004028ca <+14>:    mov    %eax,%edi
   0x00000000004028cc <+16>:    callq  0x400728 <srand@plt>

4. if (argc >= 2 && argv[1][0] == 'r' || argc == 3 && argv[2][0] == 'r

   0x00000000004028d1 <+21>:    cmp    $0x1,%ebp
   0x00000000004028d4 <+24>:    jle    0x4028df <main+35>
   0x00000000004028d6 <+26>:    mov    0x8(%rbx),%rax
   0x00000000004028da <+30>:    cmpb   $0x72,(%rax)
   0x00000000004028dd <+33>:    je     0x4028f7 <main+59>
   0x00000000004028df <+35>:    mov    $0x0,%r12d
   0x00000000004028e5 <+41>:    cmp    $0x3,%ebp
   0x00000000004028e8 <+44>:    jne    0x40290f <main+83>
   0x00000000004028ea <+46>:    mov    0x10(%rbx),%rax
   0x00000000004028ee <+50>:    cmpb   $0x72,(%rax)
   0x00000000004028f1 <+53>:    jne    0x4029be <main+258>

5. Calll rand()
   0x00000000004028f7 <+59>:    callq  0x400738 <rand@plt>

   0x00000000004028fc <+64>:    mov    %eax,%edx
   0x00000000004028fe <+66>:    sar    $0x1f,%edx
   0x0000000000402901 <+69>:    shr    $0x1b,%edx
   0x0000000000402904 <+72>:    lea    (%rax,%rdx,1),%r12d
   0x0000000000402908 <+76>:    and    $0x1f,%r12d
   0x000000000040290c <+80>:    sub    %edx,%r12d
   0x000000000040290f <+83>:    lea    0x20196b(%rip),%edi        # 0x604280 <Name>
   0x0000000000402915 <+89>:    and    $0xfffffffffffff000,%rdi

6. Call mprotect()

   0x000000000040291c <+96>:    mov    $0x3,%edx
   0x0000000000402921 <+101>:   mov    $0x1,%esi
   0x0000000000402926 <+106>:   callq  0x400678 <mprotect@plt>


7.   if (argc >= 2 && argv[1][0] == 's' || argc == 3 && argv[2][0] == 's'|6. Call mprotect()                                                    
)                                                                        init_sandbox(); 

   0x000000000040292b <+111>:   cmp    $0x1,%ebp
   0x000000000040292e <+114>:   jle    0x402939 <main+125>
   0x0000000000402930 <+116>:   mov    0x8(%rbx),%rax
   0x0000000000402934 <+120>:   cmpb   $0x73,(%rax)
   0x0000000000402937 <+123>:   je     0x402947 <main+139>
   0x0000000000402939 <+125>:   cmp    $0x3,%ebp
   0x000000000040293c <+128>:   jne    0x40294c <main+144>

   0x0000000000402942 <+134>:   cmpb   $0x73,(%rax)
   0x0000000000402945 <+137>:   jne    0x40294c <main+144>
   0x0000000000402947 <+139>:   callq  0x403a7b <init_sandbox>


8. print what's your name ? 

   0x000000000040294c <+144>:   mov    $0x403c38,%edi
   0x0000000000402951 <+149>:   callq  0x400698 <puts@plt>

9. readString(Name,r)
   0x0000000000402956 <+154>:   mov    %r12d,%esi
   0x0000000000402959 <+157>:   mov    $0x604280,%edi
   0x000000000040295e <+162>:   mov    $0x0,%eax
   0x0000000000402963 <+167>:   callq  0x401838 <readString>
   0x0000000000402968 <+172>:   mov    $0x604280,%esi
   0x000000000040296d <+177>:   mov    $0x403c4b,%edi
   0x0000000000402972 <+182>:   mov    $0xd,%ecx

10. Strcmp (Name, Andrew Appel)

   0x0000000000402977 <+187>:   repz cmpsb %es:(%rdi),%ds:(%rsi)
   0x0000000000402979 <+189>:   seta   %dl
   0x000000000040297c <+192>:   setb   %al
   0x000000000040297f <+195>:   cmp    %al,%dl
   0x0000000000402981 <+197>:   jne    0x40298a <main+206>
   0x0000000000402983 <+199>:   movb   $0x43,0x2018ba(%rip)        # 0x604244 <grade>

11. Print Thank you
   0x000000000040298a <+206>:   mov    $0x604280,%esi
   0x000000000040298f <+211>:   mov    $0x403c58,%edi
   0x0000000000402994 <+216>:   mov    $0x0,%eax
   0x0000000000402999 <+221>:   callq  0x400688 <printf@plt>

12. Print Recommended grade
   0x000000000040299e <+226>:   movsbl 0x20189f(%rip),%esi        # 0x604244 <grade>

   0x00000000004029a5 <+233>:   mov    $0x403c68,%edi
   0x00000000004029aa <+238>:   mov    $0x0,%eax
   0x00000000004029af <+243>:   callq  0x400688 <printf@plt>

13. Call exit(0)
   0x00000000004029b4 <+248>:   mov    $0x0,%edi
   0x00000000004029b9 <+253>:   callq  0x4006a8 <exit@plt>
   0x00000000004029be <+258>:   lea    0x2018bc(%rip),%edi        # 0x604280 <Name>
   0x00000000004029c4 <+264>:   and    $0xfffffffffffff000,%rdi
   0x00000000004029cb <+271>:   mov    $0x3,%edx
   0x00000000004029d0 <+276>:   mov    $0x1,%esi
   0x00000000004029d5 <+281>:   callq  0x400678 <mprotect@plt>
   0x00000000004029da <+286>:   mov    $0x0,%r12d
   0x00000000004029e0 <+292>:   jmpq   0x402930 <main+116>
End of assembler dump.






 BSS Analysys :

--------------

Grade is 1 Byte long. It's stored at address 0c604244.


(gdb) print Name
$1 = '\000' <repeats 35 times>
(gdb) print Name[0]
$2 = 0 '\000'
(gdb) print &Name[0]
$3 = 0x604280 ""  <<<--------------Starting address of Name
(gdb) print &Name[35]
$4 = 0x6042a3 ""  <<< -- End address of Name
(gdb)


[mghegde@eb2-2236-aw02 buffer_attack]$ size hello3
   text    data     bss     dec     hex filename
  15518     584      72   16174    3f2e hello3 << -- BSS size is 72 Bytes long
[mghegde@eb2-2236-aw02 buffer_attack]$ 


eos$ readelf -s hello3 | grep 25
    15: 0000000000604260     8 OBJECT  GLOBAL DEFAULT   25 stdin@GLIBC_2.2.5 (2)
    25: 0000000000604260     0 SECTION LOCAL  DEFAULT   25 
    41: 0000000000604268     1 OBJECT  LOCAL  DEFAULT   25 completed.6349
    42: 0000000000604270     8 OBJECT  LOCAL  DEFAULT   25 dtor_idx.6351
    79: 0000000000604260     8 OBJECT  GLOBAL DEFAULT   25 stdin@@GLIBC_2.2.5
    88: 0000000000604280    36 OBJECT  GLOBAL DEFAULT   25 Name
eos$ 

-------------------------------------------------------------------------
		Stack
------------------------------------------------------------------------
		 -
		 -
		 -


		-
		-
-----------------------------------------------------------------------
		Heap
----------------------------------------------------------------------
		BSS -- Total size 72 Bytes

		&Name[0] - 0x604280
		.
		.

		&Name[35] - 0x6042a3
----------------------------------------------------------------------
		Initialised Data - Total size 584 Bytes

                &grade - 0x604244 - 1 Byte long
----------------------------------------------------------------------



Data section Analysys:
--------------------

Grade is 1 Byte long. Address is 0x604244. 

size hello3
   text    data     bss     dec     hex filename
  15518     584      72   16174    3f2e hello3


(gdb) print grade
$1 = 70 'F'
(gdb) print &grade
$2 = 0x604244 "F"
(gdb)


s$ readelf -s hello3 | grep 24
    24: 0000000000604240     0 SECTION LOCAL  DEFAULT   24 
    59: 0000000000604240     0 NOTYPE  WEAK   DEFAULT   24 data_start
    77: 0000000000604240     0 NOTYPE  GLOBAL DEFAULT   24 __data_start
    87: 0000000000604248     0 NOTYPE  GLOBAL DEFAULT  ABS __bss_start
    92: 0000000000604244     1 OBJECT  GLOBAL DEFAULT   24 grade <<< ----------
    94: 0000000000604248     0 NOTYPE  GLOBAL DEFAULT  ABS _edata
eos$ 



-------------------------------------------------------------------------
                Stack
------------------------------------------------------------------------
                 -
                 -
                 -


                -
                -
-----------------------------------------------------------------------
                Heap
----------------------------------------------------------------------
                BSS -- Total size 72 Bytes

                &Name[0] - 0x604280
                .
                .

                &Name[35] - 0x6042a3

----------------------------------------------------------------------
                Initialised Data     - Total size 584 Bytes

		&grade - 0x604244 - 1 Byte long
----------------------------------------------------------------------





Stack frame Layout :
------------------


Stack pointer - 0x7fffffffe0d8
Buf  - 0x7fffffffe070
s =    0x604280
rip - 0x7fffffffe0e8

(gdb) info frame
Stack level 0, frame at 0x7fffffffe0f0:
 rip = 0x401895 in readString (readString.c:33); saved rip 0x402968
 called by frame at 0x7fffffffe110
 source language c.
 Arglist at 0x7fffffffe0e0, args: s=<value optimized out>, r=<value optimized out>
 Locals at 0x7fffffffe0e0, Previous frame's sp is 0x7fffffffe0f0
 Saved registers:
  rbx at 0x7fffffffe0c8, rbp at 0x7fffffffe0e0, r12 at 0x7fffffffe0d0, r13 at 0x7fffffffe0d8, rip at 0x7fffffffe0e8
(gdb) print rsp
No symbol "rsp" in current context.
(gdb) print $rsp
$2 = (void *) 0x7fffffffe080
(gdb) 

